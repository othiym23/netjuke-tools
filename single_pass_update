#!/usr/bin/env ruby

# == Synopsis 
#   Netjuke's default MP3 scanner makes me nervous, being written in
#   grimy PHP and using Netjuke's hacktacular taglib. It also appears
#   to be hella inefficient. Hence this command-line replacement, which
#   tries to do everything in a single pass, use judicious amounts of
#   caching, and not be extravagant about memory or database usage.
#
# == Examples
#   This is the way this program will almost always be invoked:
#     single_pass_update --dbpass=<password> /data/music mp3
#
#   Other examples:
#     single_pass_update --verbose /Volumes/data/music holding/pending
#
# == Usage 
#   single_pass_update [options] archive_root subdirectory
#
#   For help use: single_pass_update -h
#
# == Options
#   -h, --help          displays help message
#   -v, --version       displays the version, then exits
#   -V, --verbose       turns on verbose output
#   -D, --dbname        Netjuke database instance name (defaults to "netjuke")
#   -U, --dbuser        Netjuke database username (defaults to "netjuke")
#   -P, --dbpass        Netjuke database password
#   -H, --dbhost        Netjuke database host (defaults to localhost)
#
# == Author
#   Forrest L Norvell <forrest@driftglass.org>
#
# == Copyright
#   Copyright (c) 2008 Forrest L Norvell. Licensed under
#   the GNU General Public License, Version 2

require 'optparse'
require 'rdoc/usage'
require 'ostruct'
require 'find'
require 'uri'

require 'rubygems'
require 'sequel'

$: << File.expand_path(File.join(File.dirname(__FILE__), '../ingestion/lib'))
require 'track_metadata'

class SinglePassUpdate
  VERSION = "1 (Ruby)"

  def initialize(arguments)
    @new_tracks      = 0
    @existing_tracks = 0
    @updated_tracks  = 0
    
    @new_artists = 0
    @new_albums  = 0
    @new_genres  = 0
    
    @artist_cache_by_name = {}
    @album_cache_by_name  = {}
    @genre_cache_by_name  = {}

    @artist_cache_by_id = {}
    @album_cache_by_id  = {}
    @genre_cache_by_id  = {}
    
    @arguments = arguments
    
    # set up option defaults
    @options = OpenStruct.new
    @options.verbose = false
    @options.dbname = "netjuke"
    @options.dbuser = "netjuke"
    @options.dbhost = "localhost"
  end
  
  def run
    if parsed_options? && arguments_valid?
      
      process_arguments
      connect_netjuke_db
      
      create_location_cache
      scan_archive
      update_counts
      output_summary
    else
      output_usage
    end
  end
  
  protected

  def arguments_valid?
    true if @arguments.size == 2 && File.directory?(@arguments[0] + File::SEPARATOR + @arguments[1])
  end
  
  def parsed_options?
    parser = OptionParser.new 
    parser.on('-v', '--version')         { output_version ; exit 0 }
    parser.on('-h', '--help')            { output_help }
    parser.on('-V', '--verbose')         { @options.verbose = true }
    parser.on('-D', '--dbname DBNAME')   { |database| @options.dbname = database }
    parser.on('-U', '--dbuser USERNAME') { |username| @options.dbuser = username }
    parser.on('-P', '--dbpass PASSWORD') { |password| @options.dbpass = password }
    parser.on('-H', '--dbhost HOSTNAME') { |hostname| @options.dbhost = hostname }

    parser.parse!(@arguments) rescue return false

    true
  end

  def output_help
    output_version
    RDoc::usage() # exits app
  end
  
  def output_usage
    RDoc::usage('usage') # gets usage from comments above
  end

  def output_version
    puts "#{File.basename(__FILE__)} version #{VERSION}"
  end
  
  def process_arguments
    @archive_root = @arguments[0]
    @subdirectory = @arguments[1]
  end

  private
  
  def connect_netjuke_db
    @@db_connection = Sequel.mysql(@options.dbname, :user     => @options.dbuser,
                                                    :password => @options.dbpass,
                                                    :host     => @options.dbhost)
    @@tracks = @@db_connection[:netjuke_tracks]
  end

  def create_location_cache
    puts "building track cache..."
    @track_cache = @@tracks.inject({}) {|cache, row| cache[readable_path(row[:location])] = row; cache}
    puts "track cache populated."
  end
  
  def scan_archive
    Find.find(@archive_root + File::SEPARATOR + @subdirectory) do |path|
      next unless media_file?(path)

      if !@track_cache[path]
        puts "NO rows found for path #{path}; creating one" if @options.verbose
        @new_tracks += 1
        create_track(path)
        @existing_tracks +=1
      else
        puts "entry for path #{path} exists" if @options.verbose
        @existing_tracks += 1
        track = @track_cache[path]
        
        if track_updated?(track, path)
          @updated_tracks += 1
          update_track(track)
          puts "UPDATE: track was stored at #{track[:mtime]}, last updated at #{File.mtime(readable_path(track[:location]))}" if @options.verbose
        end
      end
    end
  end
  
  def update_counts
    @@db_connection.transaction do
      puts "updating denormalized track count for each genre...\n" if @options.verbose
      @@db_connection << "CREATE TEMPORARY TABLE genre_tracks AS SELECT netjuke_tracks.ge_id genre_id, COUNT(netjuke_tracks.id) genre_track_count FROM netjuke_tracks GROUP BY genre_id"
      @@db_connection << "UPDATE netjuke_genres, genre_tracks SET netjuke_genres.track_cnt = genre_tracks.genre_track_count WHERE netjuke_genres.id = genre_tracks.genre_id"
      
      puts "updating denormalized track count for each artist...\n" if @options.verbose
      @@db_connection << "CREATE TEMPORARY TABLE artist_tracks AS SELECT netjuke_tracks.ar_id artist_id, COUNT(netjuke_tracks.id) artist_track_count FROM netjuke_tracks GROUP BY artist_id"
      @@db_connection << "UPDATE netjuke_artists, artist_tracks SET netjuke_artists.track_cnt = artist_tracks.artist_track_count WHERE netjuke_artists.id = artist_tracks.artist_id"
      
      puts "updating denormalized track count for each album...\n" if @options.verbose
      @@db_connection << "CREATE TEMPORARY TABLE album_tracks AS SELECT netjuke_tracks.al_id album_id, COUNT(netjuke_tracks.id) album_track_count FROM netjuke_tracks GROUP BY album_id"
      @@db_connection << "UPDATE netjuke_albums, album_tracks SET netjuke_albums.track_cnt = album_tracks.album_track_count WHERE netjuke_albums.id = album_tracks.album_id"
    end
  end
  
  def output_summary
    puts "\n\n"
    puts "#{@new_artists} artists created, #{@new_albums} albums created, and #{@new_genres} genres created."
    puts "#{@new_tracks} tracks created, #{@updated_tracks} tracks updated, and #{@existing_tracks} tracks total."
  end
  
  def media_file?(path)
    return File.extname(path).downcase == ".mp3"
  end
  
  def storable_path(path)
    URI.encode(path[(@archive_root.length + 1)..path.length])
  end
  
  def readable_path(path)
    "#{@archive_root}#{File::SEPARATOR}#{URI.decode(path)}"
  end
  
  def track_updated?(track, path)
    track[:mtime] != File.mtime(path)
  end
  
  def process_artist(artist_name)
    unless @artist_cache_by_name[artist_name]
      artists = @@db_connection[:netjuke_artists]
      unless artist_name == ''
        artist_rows = artists.where(:name => artist_name)
        
        if artist_rows.size == 0
          puts "creating artist #{artist_name}" if @options.verbose
          artists << { :name => artist_name }
          artist_rows = artists.where(:name => artist_name)
          @new_artists += 1
        end
      else
        artist_rows = artists.where(:name => 'N/A')
      end
      
      if artist_rows.size > 1
        puts "ERROR more than one artist found for #{artist_name}"
        exit -2
      end
      
      artist = artist_rows.first
      @artist_cache_by_name[artist_name] = artist
      @artist_cache_by_id[artist[:id]] = artist
    end

    @artist_cache_by_name[artist_name][:id]
  end
  
  def process_album(album_name)
    unless @album_cache_by_name[album_name]
      albums = @@db_connection[:netjuke_albums]
      unless album_name == ''
        album_rows = albums.where(:name => album_name)

        if album_rows.size == 0
          puts "creating album #{album_name}" if @options.verbose
          albums << { :name => album_name }
          album_rows = albums.where(:name => album_name)
          @new_albums += 1
        end
      else
        album_rows = albums.where(:name => 'N/A')
      end
      
      if album_rows.size > 1
        puts "ERROR more than one album found for #{album_name}"
        exit -2
      end
      
      album = album_rows.first
      @album_cache_by_name[album_name] = album
      @album_cache_by_id[album[:id]] = album
    end

    @album_cache_by_name[album_name][:id]
  end

  def process_genre(genre_name)
    unless @genre_cache_by_name[genre_name]
      genres = @@db_connection[:netjuke_genres]
      unless genre_name == ''
        genre_rows = genres.where(:name => genre_name)

        if genre_rows.size == 0
          puts "creating genre #{genre_name}" if @options.verbose
          genres << { :name => genre_name }
          genre_rows = genres.where(:name => genre_name)
          @new_genres += 1
        end
      else
        genre_rows = genres.where(:name => 'N/A')
      end
      
      if genre_rows.size > 1
        puts "ERROR more than one genre found for #{genre_name}"
        exit -2
      end
      
      genre = genre_rows.first
      @genre_cache_by_name[genre_name] = genre
      @genre_cache_by_id[genre[:id]] = genre
    end
    
    @genre_cache_by_name[genre_name][:id]
  end
  
  def create_track(path)
    new_track = populate_track_record(path)

    puts "creating track #{new_track[:name]} (by #{@artist_cache_by_id[new_track[:ar_id]][:name]}, from album ID _#{@album_cache_by_id[new_track[:al_id]][:name]}_)" if @options.verbose
    @@tracks << new_track
  end
  
  def update_track(track)
    updated_track = populate_track_record(readable_path(track[:location]))
    
    # TODO: there may be a more efficient way to do this using a Sequel model, but
    # let's keep it high-level for now
    puts "updating track #{updated_track[:name]} (by #{@artist_cache_by_id[updated_track[:ar_id]][:name]}, from album ID _#{@album_cache_by_id[updated_track[:al_id]][:name]}_)" if @options.verbose
    @@tracks.where(:id => track[:id]).update(
      :ar_id        => updated_track[:ar_id],
      :al_id        => updated_track[:al_id],
      :ge_id        => updated_track[:ge_id],
      :name         => updated_track[:name],
      :size         => updated_track[:size],
      :time         => updated_track[:time],
      :track_number => updated_track[:track_number],
      :year         => updated_track[:year],
      :bit_rate     => updated_track[:bit_rate],
      :sample_rate  => updated_track[:sample_rate],
      :comments     => updated_track[:comments],
      :mtime        => updated_track[:mtime]
    )
  end
  
  def populate_track_record(path)
    metadata   = TrackId3Metadata.load_from_path(path)
    mp3file    = Mp3Info.new(path)
    
    { :ar_id        => process_artist(metadata.artist_name), 
      :al_id        => process_album(metadata.album_name),
      :ge_id        => process_genre(metadata.genre),
      :name         => metadata.track_name,
      :size         => File.size(path),
      :time         => mp3file.length.round,
      :track_number => metadata.sequence,
      :year         => metadata.release_date,
      :date         => Time.now,
      :bit_rate     => mp3file.bitrate,
      :sample_rate  => mp3file.samplerate,
      :kind         => 'MPEG AUDIO FILE',
      :comments     => metadata.comment,
      :location     => storable_path(path),
      :mtime        => File.mtime(path)
    }
  end
end

updater = SinglePassUpdate.new(ARGV)
updater.run
